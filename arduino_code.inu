/* credit
adapted from tutorial code of Janez Cimerman 

https://meetjanez.splet.arnes.si/2016/01/03/enabling-odometry-creating-odom-messege-connecting-with-slam-tutorial

*/

#include <ros.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Twist.h>
#include <stdlib.h>



//R pwm1 = 11; dir1 = 10;    L pwm2 = 9;  dir2 = 8;

//Motor vars/////////////////////////////////////////////////////////////////////////
#define CW   1
#define CCW  2

#define LMotPWMPin  9 
#define RMotPWMPin  11
#define LMotDirPin  8
#define RMotDirPin  10

int LMotor = 1;
int RMotor = 0;

int pwmpin[2] = {LMotPWMPin, RMotPWMPin}; // PWM input
int MotorNum[2] = {LMotor, RMotor};

double Vels[2] = {0,0};
int CVEL[2]= {0,0};
int Mspeeds[2] = {0,0};

int OdomCount = 0;

int OdomWait = 3;

double WCS[2] = {0,0};
long EncoderVal[2] = {0,0};
double DDis[2] = {0,0};
long Time[2] = {0,0};

float WheelSeparation = 0.40;    
float WheelDiameter = 0.09;
int TPR = 300;   //Encoder ticks per rotation 


volatile int counterL = 0;
volatile int counterR = 0;


int AccParam = 3;   //acceleration multiplier. 

bool left_forward;
bool right_forward;

ros::NodeHandle  nh;

geometry_msgs::Twist odom_msg;
ros::Publisher Pub ("ard_odom", &odom_msg);  

void countL() {
  if(left_forward == true)
   counterL++;  
  else
   counterL--;
}

void countR() {
  if(right_forward == true)
    counterR++;  
  else
    counterR--;
}

void velCallback( const geometry_msgs::Twist& CVel){    
    double vel_x = CVel.linear.x;
    double vel_th = CVel.angular.z;
    double right_vel = 0.0;
    double left_vel = 0.0;

    // turning
    if(vel_x == 0){  
        right_vel = vel_th * WheelSeparation / 2.0;
        left_vel = (-1) * right_vel;
    }
    // forward / backward
    else if(vel_th == 0){ 
        left_vel = right_vel = vel_x;
    }
    // moving doing arcs
    else{ 
        left_vel = vel_x - vel_th * WheelSeparation / 2.0;
        right_vel = vel_x + vel_th * WheelSeparation / 2.0;       
    }
    //write new command speeds to global vars 
    WCS[0] = left_vel;
    WCS[1] = right_vel;
}

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel" , &velCallback);

//motor write speed - in motor units
double MWS[2]= {0,0};

double CorrectedSpeed(int M, double CVel){
  //if fist time in program return 0 and init time vars
  if(Time[0]==0 && Time[1] == 0){
    Time[0] = millis();
    Time[1] = millis();
    return 0;
  }

  //read encoder ticks
  if(M == LMotor){
    EncoderVal[0] = counterL;
    counterL = 0;
  }
  if(M == RMotor){
    EncoderVal[1] = counterR;
    counterR = 0;
  }

  //differencial of time in seconds
  long T = millis();
  int DTime = T-Time[M];
  Time[M] = T;


  //diferential of distance in meters
  DDis[M] = TicksToMeters(EncoderVal[M]);
  
  //calculate short term measured velocity
  double EVel = (DDis[M]/DTime)*1000;
  
  //save to publish to /ard_odom
  Vels[M] = EVel;

  EVel = abs(EVel);
  CVel = abs(CVel);

  double dif = EVel - CVel;

 
  MWS[M] = MWS[M]-(dif * (AccParam));  
 
  if(MWS[M]<0)
    MWS[M] = 0;
  
  if(CVel == 0) 
     MWS[M] = 0;

  //DEBUG
  CVEL[M] = MWS[M];

  return MWS[M];

}

double TicksToMeters(int Ticks){
  return (Ticks*3.14*WheelDiameter)/TPR;
}


//motor codes///////////////////////////////////////////////////////////
void MotorWrite(){
  int DIR;
  int min_speed;

  for(int i = 0; i<2; i++){
    //correct turns of motors
    DIR = CW;
    if((WCS[i] > 0 && i == MotorNum[0] ) || (WCS[i] < 0 && i == MotorNum[1])){
      DIR=CCW;
    }

    //correct speed with encoder data
    double MSpeed = CorrectedSpeed(i, WCS[i]);
      
    
    Mspeeds[i]=MSpeed;     
  

      min_speed = Mspeeds[i];
      
      if(Mspeeds[0] != 0 && Mspeeds[1]  != 0)
          min_speed = min(Mspeeds[0],Mspeeds[1]);
   
      motorGo(MotorNum[i], DIR, min_speed);       
        
  }
}

void motorGo(uint8_t motor, uint8_t direct, uint8_t pwm)
{
     if(WCS[0] > 0 && WCS[1] > 0) {
      left_forward = right_forward = true;      
        digitalWrite(LMotDirPin,1);  
        digitalWrite(RMotDirPin,1);  
     }else if(WCS[0] < 0 && WCS[1] < 0) {
      left_forward = right_forward = false;
        digitalWrite(LMotDirPin,0);  
        digitalWrite(RMotDirPin,0);  
     }
     else if(WCS[0] > 0 && WCS[1] < 0) {
      left_forward = true; 
      right_forward = false;
        digitalWrite(LMotDirPin,1);  
        digitalWrite(RMotDirPin,0);  
     }
     else if(WCS[0] < 0 && WCS[1] > 0) {
      left_forward = false;
      right_forward = true;
        digitalWrite(LMotDirPin,0);  
        digitalWrite(RMotDirPin,1);  
     }
   analogWrite(pwmpin[motor], pwm);
}

void setup()
{   
  nh.initNode();
  nh.subscribe(sub);

  nh.advertise(Pub);  
   
  //       pwm1 = 11; dir1 = 10; pwm2 = 9;  dir2 = 8;
    pinMode(11, OUTPUT); 
    pinMode(9, OUTPUT); 
    pinMode(10, OUTPUT); 
    pinMode(8, OUTPUT); 

    pinMode(2,INPUT);
    pinMode(3,INPUT);

    digitalWrite(2, HIGH);
    digitalWrite(3, HIGH);
    
    attachInterrupt(digitalPinToInterrupt(2),countL,RISING);
    attachInterrupt(digitalPinToInterrupt(3),countR,RISING);   

}


void loop()
{    
  
  nh.spinOnce();
    
    //first couple of times dont publish odom
    if(OdomCount > OdomWait){
      odom_msg.linear.x = Vels[0];
      odom_msg.linear.y = Vels[1];
      
    Pub.publish(&odom_msg);
   
    }
  else
    OdomCount++;    
        
    MotorWrite();  //Takes WCS and corrects speed of motors with encoders      
    delay(3);  
          
}
